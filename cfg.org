#+title: Babby's first cfg
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Notes
** Guides
create your own theme: https://www.youtube.com/watch?v=kCCIudu53Zg

** packages we are interested in:
1. helpful
2. all-the-icons
3. orderless

** TODO:
0. persistent undo
1. Show whitespace chars
2. write config in Org with Org Babel
   - https://www.youtube.com/watch?v=kkqVTDbfYp4
   - wtf is tangling?
3. design our own theme
4. get notifications for org mode
6. custom statusline
7. show time somewhere?
8. other package managers?
9. indent-guides

Evil:
  1. inc and dec nums (use evil-numbers)
  2. avy = hop.nvim, need evil-integrations
  3. why does op<down>, e.g. yn, copy only from point down?
     - should copy both lines wholly

Goals for Friday
2. set up avy
2. Set up LSP
3. Pick from list above


* Settings
** UI
#+begin_src emacs-lisp
(setq inhibit-startup-message t)
(setq initial-buffer-choice "/home/m/.emacs.d/cfg.org")

  ;; UI
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (set-fringe-mode 10)
  (show-paren-mode 1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (setq-default indicate-empty-lines t)


(setq-default fill-column 80)

  ;;(global-display-fill-column-indicator-mode)
  ;;(display-fill-column-indicator-column 80)

  ;; https://two-wrongs.com/centered-cursor-mode-in-vanilla-emacs
  (setq scroll-preserve-screen-position t
  scroll-conservatively 0
  maximum-scroll-margin 0.5
  scroll-margin 99999)


  (global-display-line-numbers-mode 1)
  (setq display-line-numbers-type 'relative)
#+end_src

** Options
#+begin_src emacs-lisp
  (setq make-backup-files nil)
  (setq create-lockfiles nil)
#+end_src

** Hooks
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook (lambda ()
    (display-fill-column-indicator-mode)))
#+end_src


* Fonts
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Terminus-11")
  (set-face-attribute 'italic nil :family "Victor Mono" :weight 'semilight :slant 'italic)
#+end_src


* Maps
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-quit)
#+end_src


* Packages
** init
#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("elpa" . "https://elpa.gnu.org/packages/")
		     ("melpa" . "https://melpa.org/packages/")
		     ("org" . "https://orgmode.org/elpa/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Unless use-package is already installed, install it
  ;; https://ianyepan.github.io/posts/setting-up-use-package/
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)

  ;; Ensure that all packages used via use-package are ensured
  (setq use-package-always-ensure t)
#+end_src

** evil
#+begin_src emacs-lisp
   (use-package evil
    :ensure t
    :init
    (setq evil-want-keybinding nil)
    (setq evil-respect-visual-line-mode t)
    (setq evil-show-paren-range 1)

    ;; Might use this if it even feels needed after using some sort of completion framework
    ;; (setq evil-want-minibuffer t)
    (setq evil-insert-state-cursor '((bar . 1) "yellow")
    evil-normal-state-cursor '(box "yellow")
    evil-operator-state-cursor '((hbar . 1) "yellow"))


    :config
    (evil-mode 1)
    ;; defaults: https://github.com/emacs-evil/evil/blob/a941e89a8cdd743eeccc0eabb5b833f51bf51cd1/evil-maps.el
    ;; TODO: map these with a function, save some space

    ;; left
    (define-key evil-normal-state-map "s" 'evil-backward-char)
    (define-key evil-visual-state-map "s" 'evil-backward-char)
    (define-key evil-motion-state-map "s" 'evil-backward-char)

    ;; right
    (define-key evil-normal-state-map "t" 'evil-forward-char)
    (define-key evil-visual-state-map "t" 'evil-forward-char)
    (define-key evil-motion-state-map "t" 'evil-forward-char)

    ; replace 't' with 'l'
    (define-key evil-motion-state-map "l" 'evil-find-char-to)
    (define-key evil-motion-state-map "L" 'evil-find-char-to-backward)

    ;; down
    (define-key evil-normal-state-map "n" 'evil-next-visual-line)
    (define-key evil-visual-state-map "n" 'evil-next-visual-line)
    (define-key evil-motion-state-map "n" 'evil-next-line)
    (define-key evil-normal-state-map "N" 'evil-join)

    ;; up
    (define-key evil-normal-state-map "e" 'evil-previous-visual-line)
    (define-key evil-visual-state-map "e" 'evil-previous-visual-line)
    (define-key evil-motion-state-map "e" 'evil-previous-line)

    ;; other
    (define-key evil-normal-state-map (kbd "SPC") 'evil-append)
    (define-key evil-visual-state-map (kbd "SPC") 'evil-insert)

    (define-key evil-normal-state-map (kbd "RET") 'evil-ex)
    (define-key evil-visual-state-map (kbd "RET") 'evil-ex)
    (define-key evil-normal-state-map [(S-return)] 'execute-extended-command))


  (require 'evil-replace-with-register)
  (setq evil-replace-with-register-key (kbd "r"))
  (evil-replace-with-register-install)


  (use-package evil-goggles
    :ensure t
    :config

    (setq evil-goggles-enable-delete nil)
    (setq evil-goggles-enable-change nil)
    (setq evil-goggles-enable-join nil)

    (evil-goggles-mode)
    (evil-goggles-use-diff-faces))


  (use-package evil-numbers)
  ;;(evil-define-key '(normal visual) 'global (kbd "C-a") 'evil-numbers/inc-at-pt)
  ;;(evil-define-key '(normal visual) 'global (kbd "C-x") 'evil-numbers/dec-at-pt)

#+end_src

** Org
#+begin_src emacs-lisp
  (use-package org)

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))

  (with-eval-after-load 'org
    (org-babel-do-load-languages
	'org-babel-load-languages
	'((emacs-lisp . t)
	(python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))


(setq org-startup-truncated nil)
#+end_src

** LSP mode
*** init
#+begin_src emacs-lisp
#+end_src

** Theme
#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t))
#+end_src

** Formatting
#+begin_src emacs-lisp
#+end_src

** Other
#+begin_src emacs-lisp
  ;; TODO: use custom highlighter to only apply guides after level 0
  (use-package highlight-indent-guides
    :init
      (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
    :config
      (setq highlight-indent-guides-character ?|)
      (setq highlight-indent-guides-method 'character))
#+end_src


* Development
** Languages
#+begin_src emacs-lisp
#+end_src
